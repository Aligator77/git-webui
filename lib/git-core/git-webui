#!/usr/bin/python

import argparse
import codecs
import os
import posixpath
import shlex
import subprocess
import sys
import webbrowser

if sys.version > '3':
    from http.server import SimpleHTTPRequestHandler, HTTPServer
    from urllib.parse import unquote
else:
    from SimpleHTTPServer import SimpleHTTPRequestHandler
    from BaseHTTPServer import HTTPServer
    from urllib import unquote




class WebUiRequestHandler(SimpleHTTPRequestHandler):

    WEB_ROOT = None
    REPO_ROOT = None

    @classmethod
    def setup_paths(cls, repo_root):
        web_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0]))))
        web_root = os.path.join(web_root, "share", "git-webui", "webui")
        WebUiRequestHandler.WEB_ROOT = web_root
        WebUiRequestHandler.REPO_ROOT = repo_root


    def translate_path(self, path):
        if path.startswith("/repo"):
            root = WebUiRequestHandler.REPO_ROOT
            path = path[5:]
        else:
            root = WebUiRequestHandler.WEB_ROOT

        # abandon query parameters
        path = path.split('?',1)[0]
        path = path.split('#',1)[0]
        # Don't forget explicit trailing slash when normalizing. Issue17324
        trailing_slash = True if path.rstrip().endswith('/') else False
        path = posixpath.normpath(unquote(path))
        words = path.split('/')
        words = filter(None, words)
        path = root
        for word in words:
            drive, word = os.path.splitdrive(word)
            head, word = os.path.split(word)
            if word in (os.curdir, os.pardir): continue
            path = os.path.join(path, word)
        if trailing_slash:
            path += '/'
        return path


    def do_GET(self):
        if self.path.startswith("/git/cat-file/"):
            obj = self.path[14:]
            self.process(["git", "cat-file", "-p", obj])
        elif self.path == "/dirname":
            wc = os.path.split(WebUiRequestHandler.REPO_ROOT)[1]
            self.send_text(200, codecs.encode(wc, "utf-8"))
        else:
            SimpleHTTPRequestHandler.do_GET(self)


    def do_POST(self):
        if self.path == "/git":
            content_length = int(self.headers["Content-Length"])
            args = codecs.decode(self.rfile.read(content_length), "utf-8")
            cmd = shlex.split("git " + args)
            self.process(cmd)
        else:
            self.send_error(404)


    def process(self, cmd):
        git = subprocess.Popen(cmd, stdout = subprocess.PIPE, stderr = subprocess.PIPE, cwd = WebUiRequestHandler.REPO_ROOT)
        stdout, stderr = git.communicate()
        if git.returncode == 0:
            http_status = 200
            result = stdout
        else:
            http_status = 500
            result = stderr
        self.send_text(http_status, result)


    def send_text(self, http_status, text):
        self.send_response(http_status)
        self.send_header("Content-type", "text/plain")
        self.send_header("Content-Length", len(text))
        self.end_headers()
        self.wfile.write(text)




if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = "Simple HTTP server for git webui")
    parser.add_argument("--port", type = int, help = "server port", default = 8000)
    parser.add_argument("--repo-root", help = "repository root path. By default goes up a dir until a '.git' directory is found")
    args = parser.parse_args()

    if args.repo_root is None:
        args.repo_root = os.path.abspath(os.getcwd())
        while '.git' not in os.listdir(args.repo_root):
            new_root = os.path.dirname(args.repo_root)
            if new_root == args.repo_root:
                args.repo_root = None
                break
            else:
                args.repo_root = new_root

    if args.repo_root is None or '.git' not in os.listdir(args.repo_root):
        print("No git repository found")
        sys.exit(1)
    WebUiRequestHandler.setup_paths(args.repo_root)

    httpd = HTTPServer(("127.0.0.1", args.port), WebUiRequestHandler)

    url = "http://localhost:{}".format(args.port)
    print("Serving at {}".format(url))
    webbrowser.open(url)

    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        httpd.server_close()
        sys.exit(0)
